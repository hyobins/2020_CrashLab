// Generated by gencpp from file cranberry_topic/CommLightRequest.msg
// DO NOT EDIT!


#ifndef CRANBERRY_TOPIC_MESSAGE_COMMLIGHTREQUEST_H
#define CRANBERRY_TOPIC_MESSAGE_COMMLIGHTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cranberry_topic
{
template <class ContainerAllocator>
struct CommLightRequest_
{
  typedef CommLightRequest_<ContainerAllocator> Type;

  CommLightRequest_()
    : target(0)
    , state(0)  {
    }
  CommLightRequest_(const ContainerAllocator& _alloc)
    : target(0)
    , state(0)  {
  (void)_alloc;
    }



   typedef int32_t _target_type;
  _target_type target;

   typedef int32_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::cranberry_topic::CommLightRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cranberry_topic::CommLightRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CommLightRequest_

typedef ::cranberry_topic::CommLightRequest_<std::allocator<void> > CommLightRequest;

typedef boost::shared_ptr< ::cranberry_topic::CommLightRequest > CommLightRequestPtr;
typedef boost::shared_ptr< ::cranberry_topic::CommLightRequest const> CommLightRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cranberry_topic::CommLightRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cranberry_topic::CommLightRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cranberry_topic::CommLightRequest_<ContainerAllocator1> & lhs, const ::cranberry_topic::CommLightRequest_<ContainerAllocator2> & rhs)
{
  return lhs.target == rhs.target &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cranberry_topic::CommLightRequest_<ContainerAllocator1> & lhs, const ::cranberry_topic::CommLightRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cranberry_topic

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cranberry_topic::CommLightRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cranberry_topic::CommLightRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cranberry_topic::CommLightRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cranberry_topic::CommLightRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cranberry_topic::CommLightRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cranberry_topic::CommLightRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cranberry_topic::CommLightRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a76d4d7a6fce16978d751f5a03b77fa";
  }

  static const char* value(const ::cranberry_topic::CommLightRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a76d4d7a6fce169ULL;
  static const uint64_t static_value2 = 0x78d751f5a03b77faULL;
};

template<class ContainerAllocator>
struct DataType< ::cranberry_topic::CommLightRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cranberry_topic/CommLightRequest";
  }

  static const char* value(const ::cranberry_topic::CommLightRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cranberry_topic::CommLightRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 target\n"
"int32 state\n"
;
  }

  static const char* value(const ::cranberry_topic::CommLightRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cranberry_topic::CommLightRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommLightRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cranberry_topic::CommLightRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cranberry_topic::CommLightRequest_<ContainerAllocator>& v)
  {
    s << indent << "target: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target);
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRANBERRY_TOPIC_MESSAGE_COMMLIGHTREQUEST_H
